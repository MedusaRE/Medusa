<!-- This file is licensed under the terms of the CC BY-SA 4.0 license. -->

<?xml version="1.0"?>

<!-->
	> Remember kids, hand-write your XML!
  -->

<cpu_definition>
	<cpu_info>
		<name>ARMv7</name>
		<description>A RISC-type ISA.</description>
	</cpu_info>

	<register_list>
		<register>
			<name>r0</name>
			<description>r0</description>
			<id>0</id>
			<default_value>0</default_value>
		</register>

		<register>
			<name>r1</name>
			<description>r1</description>
			<id>1</id>
			<default_value>0</default_value>
		</register>

		<register>
			<name>r2</name>
			<description>r2</description>
			<id>2</id>
			<default_value>0</default_value>
		</register>

		<register>
			<name>r3</name>
			<description>r3</description>
			<id>3</id>
			<default_value>0</default_value>
		</register>

		<register>
			<name>r4</name>
			<description>r4</description>
			<id>4</id>
			<default_value>0</default_value>
		</register>

		<register>
			<name>r5</name>
			<description>r5</description>
			<id>5</id>
			<default_value>0</default_value>
		</register>

		<register>
			<name>r6</name>
			<description>r6</description>
			<id>6</id>
			<default_value>0</default_value>
		</register>

		<register>
			<name>r7</name>
			<description>r7</description>
			<id>7</id>
			<default_value>0</default_value>
		</register>

		<register>
			<name>r8</name>
			<description>r8</description>
			<id>8</id>
			<default_value>0</default_value>
		</register>

		<register>
			<name>r9</name>
			<description>r9</description>
			<id>9</id>
			<default_value>0</default_value>
		</register>

		<register>
			<name>r10</name>
			<description>r10</description>
			<id>10</id>
			<default_value>0</default_value>
		</register>

		<register>
			<name>r11</name>
			<description>r11</description>
			<id>11</id>
			<default_value>0</default_value>
		</register>

		<register>
			<name>ip</name>
			<description>ip</description>
			<id>12</id>
			<default_value>0</default_value>
		</register>

		<register>
			<name>sp</name>
			<description>sp</description>
			<id>13</id>
			<default_value>0</default_value>
		</register>

		<register>
			<name>lr</name>
			<description>lr</description>
			<id>14</id>
			<default_value>0</default_value>
		</register>

		<register>
			<name>pc</name>
			<description>pc</description>
			<id>15</id>
			<default_value>0</default_value>
		</register>

		<register>
			<name>cpsr</name>
			<description>cpsr</description>
			<id>16</id>
			<default_value>0</default_value>
		</register>
	</register_list>

	<shortcut_list>
		<shortcut>
			<name>register</name>
			<regex>__REGISTER</regex>
			<replace>(r[0-9]+|sp|ip|lr|pc|fp)</replace>
		</shortcut>

		<shortcut>
			<name>hex const</name>
			<regex>__HEX_CONST</regex>
			<replace>#(0x[0-9a-fA-F]+)</replace>
		</shortcut>

		<shortcut>
			<name>decimal const</name>
			<regex>__DEC_CONST</regex>
			<replace>#([0-9]+)</replace>
		</shortcut>

		<shortcut>
			<name>const</name>
			<regex>__CONST</regex>
			<replace>#(0x[0-9a-fA-F]+|[0-9]+)</replace>
		</shortcut>

		<shortcut>
			<name>hex</name>
			<regex>__0x_HEX</regex>
			<replace>(0x[0-9a-fA-F]+|[0-9]+)</replace>
		</shortcut>
	</shortcut_list>

	<pattern_list>
		<pattern>
			<name>le conditional</name>
			<asm>([a-zA-Z]+)(le)</asm>
			<pc>if (__compare_flags($2)) $1</pc>
		</pattern>

		<pattern>
			<name>gt conditional</name>
			<asm>([a-zA-Z]+)(gt)</asm>
			<pc>if (__compare_flags($2)) $1</pc>
		</pattern>

		<pattern>
			<name>eq conditional</name>
			<asm>([a-zA-Z]+)(eq)</asm>
			<pc>if (__compare_flags($2)) $1</pc>
		</pattern>

		<pattern>
			<name>ne conditional</name>
			<asm>([a-zA-Z]+)(ne)</asm>
			<pc>if (__compare_flags($2)) $1</pc>
		</pattern>

		<pattern>
			<name>uint32_t-ish deref</name>
			<asm>ldr __REGISTER, \[__REGISTER, __REGISTER, lsl #2]</asm>
			<pc>$1 = $2[$3];</pc>
		</pattern>

		<pattern>
			<name>uint32_t-ish deref offset no lsl reg</name>
			<asm>ldr __REGISTER, \[__REGISTER, __REGISTER]</asm>
			<pc>$1 = $2[$3];</pc>
		</pattern>

		<pattern>
			<name>uint32_t-ish deref offset no lsl</name>
			<asm>ldr __REGISTER, \[__REGISTER, __CONST]</asm>
			<pc>$1 = $2[$3];</pc>
		</pattern>

		<pattern>
			<name>uint32_t-ish deref no-offset</name>
			<asm>ldr __REGISTER, \[__REGISTER]</asm>
			<pc>$1 = *$2;</pc>
		</pattern>

		<pattern>
			<name>add 2 registers</name>
			<asm>add __REGISTER, \1, __REGISTER</asm>
			<pc>$1 += $2;</pc>
		</pattern>

		<pattern>
			<name>add 2 registers const</name>
			<asm>add __REGISTER, __REGISTER, __REGISTER</asm>
			<pc>$1 = $2 + $3;</pc>
		</pattern>

		<pattern>
			<name>add 2 registers const</name>
			<asm>add __REGISTER, \1, __CONST</asm>
			<pc>$1 += $2;</pc>
		</pattern>

		<pattern>
			<name>add 2 registers</name>
			<asm>add __REGISTER, __REGISTER, __CONST</asm>
			<pc>$1 = $2 + $3;</pc>
		</pattern>

		<pattern>
			<name>move reg into reg</name>
			<asm>mov __REGISTER, __REGISTER</asm>
			<pc>$1 = $2;</pc>
		</pattern>

		<pattern>
			<name>move val into reg</name>
			<asm>mov __REGISTER, __CONST</asm>
			<pc>$1 = $2;</pc>
		</pattern>

		<pattern>
			<name>move val into reg</name>
			<asm>movs __REGISTER, \#(0x[0-9]+)</asm>
			<pc>$1 = $2;</pc>
		</pattern>

		<pattern>
			<name>move (wide) val into reg</name>
			<asm>movw __REGISTER, __CONST</asm>
			<pc>$1.w = $2;</pc>
		</pattern>

		<pattern>
			<name>move (wide) val into reg</name>
			<asm>movt __REGISTER, __CONST</asm>
			<pc>$1.t = $2;</pc>
		</pattern>

		<pattern>
			<name>subtract registers</name>
			<asm>sub __REGISTER, \1, __REGISTER</asm>
			<pc>$1 -= $2;</pc>
		</pattern>

		<pattern>
			<name>subtract const</name>
			<asm>sub __REGISTER, \1, __CONST</asm>
			<pc>$1 -= $2;</pc>
		</pattern>

		<pattern>
			<name>subtract registers</name>
			<asm>sub __REGISTER, __REGISTER, __REGISTER</asm>
			<pc>$1 = $2 - $3;</pc>
		</pattern>

		<pattern>
			<name>subtract const</name>
			<asm>sub __REGISTER, __REGISTER, __CONST</asm>
			<pc>$1 = $2 - $3;</pc>
		</pattern>

		<pattern>
			<name>multiply registers</name>
			<asm>mul __REGISTER, \1, __REGISTER</asm>
			<pc>$1 *= $2;</pc>
		</pattern>

		<pattern>
			<name>multiply registers</name>
			<asm>mul __REGISTER, __REGISTER, __REGISTER</asm>
			<pc>$1 = $2 * $3;</pc>
		</pattern>

		<pattern>
			<name>compare registers</name>
			<asm>cmp __REGISTER, __REGISTER</asm>
			<pc>__compare_flags = compare($1, $2);</pc>
		</pattern>

		<pattern>
			<name>compare registers</name>
			<asm>cmp __REGISTER, __HEX_CONST</asm>
			<pc>__compare_flags = compare($1, $2);</pc>
		</pattern>

		<pattern>
			<name>compare registers</name>
			<asm>cmp __REGISTER, __DEC_CONST</asm>
			<pc>__compare_flags = compare($1, $2);</pc>
		</pattern>

		<pattern>
			<name>bl</name>
			<asm>bl __HEX_CONST</asm>
			<pc>UFUNC_$1();</pc>
		</pattern>

		<pattern>
			<name>regular jump</name>
			<asm>b __CONST</asm>
			<pc>__jump($1);</pc>
		</pattern>

		<pattern>
			<name>store regular deref</name>
			<asm>str __REGISTER, \[__REGISTER\]</asm>
			<pc>*$2 = $1;</pc>
		</pattern>

		<pattern>
			<name>store deref const offset</name>
			<asm>str __REGISTER, \[__REGISTER, __CONST\]</asm>
			<pc>$2[$3] = $1;</pc>
		</pattern>

		<pattern>
			<name>bx lr</name>
			<asm>bx lr</asm>
			<pc>__return();</pc>
		</pattern>

		<pattern>
			<name>bx register</name>
			<asm>bx __REGISTER</asm>
			<pc>__jump($1);</pc>
		</pattern>

		<pattern>
			<name>push</name>
			<asm>push \{((?:__REGISTER(?:, )?)+)\}</asm>
			<pc>__push($1);</pc>
		</pattern>

		<pattern>
			<name>pop</name>
			<asm>pop \{((?:__REGISTER(?:, )?)+)\}</asm>
			<pc>__pop($1);</pc>
		</pattern>

		<pattern>
			<name>bytes</name>
			<asm>\.byte ((?:__0x_HEX(?:, )?)+)</asm>
			<pc>__byte($1);</pc>
		</pattern>

		<pattern>
			<name>strb</name>
			<asm>strb __REGISTER, \[__REGISTER\]</asm>
			<pc>*(byte*)($1) = *(byte*)($2);</pc>
		</pattern>

		<pattern>
			<name>strb offset</name>
			<asm>strb __REGISTER, \[__REGISTER, __CONST\]</asm>
			<pc>*(byte*)($1) = *(byte*)($2 + $3);</pc>
		</pattern>
	</pattern_list>
</cpu_definition>
